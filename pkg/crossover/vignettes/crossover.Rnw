\documentclass[a4paper, 10pt]{article}
\usepackage{natbib}
\bibliographystyle{plainnat}
\usepackage[T1]{fontenc}
\usepackage{url}
 \usepackage[utf8]{inputenc}
\usepackage{graphicx}
%\usepackage{tikz}
%\usetikzlibrary{decorations,arrows,shapes}
\usepackage[margin=0.9in]{geometry}
%\usepackage[left=3cm,right=3cm,top=2cm,bottom=2cm]{geometry}
\usepackage{hyperref}
\usepackage{listings}
\usepackage{xspace}
\usepackage{tabularx}
\usepackage{makeidx}\makeindex
\usepackage{algorithmic} 
\usepackage{algorithm}
\usepackage{amsmath,amsthm,amsfonts,amssymb}
\setlength{\parindent}{0mm}
\setlength{\parskip}{1mm}
\newcommand{\commentout}[1]{}
\renewcommand{\theequation}{\thesection.\arabic{\equation}}
\numberwithin{equation}{section}

\theoremstyle{definition}
\newtheorem{Def}{Definition}[section]
\newtheorem{Rem}[Def]{Remark}
\newtheorem{RemDef}[Def]{Remark und Definition}
\newtheorem{DefRem}[Def]{Definition und Remark}
\newtheorem{Example}[Def]{Example}
\theoremstyle{plain}
\newtheorem{Theorem}[Def]{Theorem}
\newtheorem{DefTheorem}[Def]{Definition and Theorem}
\newtheorem{Corollary}[Def]{Corollary}
\newtheorem{Lemma}[Def]{Lemma}

\newcommand{\C}{\ensuremath{\mathbb{C}}\xspace}
\newcommand{\R}{\ensuremath{\mathbb{R}}\xspace}
\newcommand{\Q}{\ensuremath{\mathbb{Q}}\xspace}
\newcommand{\Z}{\ensuremath{\mathbb{Z}}\xspace}
\newcommand{\NN}{\ensuremath{\mathbb{N}_0}\xspace}
\newcommand{\N}{\ensuremath{\mathbb{N}}\xspace}
\newcommand{\sF}{\ensuremath{\mathcal{F}}\xspace}
\newcommand{\sN}{\ensuremath{\mathcal{N}}\xspace}
\newcommand{\Pot}{\ensuremath{\mathfrak{Pot}}\xspace}
\newcommand{\kronecker}{\raisebox{1pt}{\ensuremath{\:\otimes\:}}}

\DeclareMathOperator{\range}{range}
\DeclareMathOperator{\Var}{Var}

\newcommand{\skp}[1]{\left\langle#1\right\rangle}

\renewcommand{\epsilon}{\varepsilon}
\renewcommand{\phi}{\varphi}
\newcommand{\id}{\text{id}}

\newenvironment{Proof}{\par\noindent\upshape\textit{Proof. }\nopagebreak}{\qed\par}

\usepackage{setspace}
\onehalfspacing

\begin{document}

%\VignetteEngine{knitr}
%\VignetteIndexEntry{crossover - A search algorithm and GUI for cross-over designs}

\title{crossover - A search algorithm and GUI for cross-over designs} 

\author{Kornelius Rohmeyer}

\maketitle

%\newpage

\tableofcontents

<<OptionsAndLibraries, include=FALSE, message=FALSE>>=
if (exists("opts_chunk")) {
  opts_chunk$set(concordance=TRUE)
  opts_chunk$set(tidy.opts=list(keep.blank.line=FALSE, width.cutoff=95))
  #opts_chunk$set(size="footnotesize")
  #opts_chunk$set(size="tiny")
  opts_chunk$set(size="scriptsize") 
  opts_chunk$set(cache=TRUE)
  opts_chunk$set(autodep=TRUE)
}

# See http://yihui.name/knitr/hooks for the following code.
crossoverNamespace <- function(before, options, envir) {
  if (before) {
    ## code to be run before a chunk
    #attach(loadNamespace("crossover"), name="namespace:crossover", pos=3)
    attach(loadNamespace("crossover"), name="namespace:crossover", pos=3, warn.conflicts=FALSE)
  } else {
    ## code to be run after a chunk
    detach("namespace:crossover")
  }
}

if (exists("opts_chunk")) {
  knit_hooks$set(withNameSpace = crossoverNamespace)
}

library(crossover, quietly=TRUE)
options(width=128)
options(digits=4)
startGUI <- function(...) {invisible(NULL)}
#options(prompt="> ", continue="+ ")
library(MASS)
library(multcomp)
library(ggplot2)
library(Matrix)


@

\newpage

\section{Introduction}

This package provides more than two hundred cross-over design from literature, a search algorithm to find efficient cross-over designs for various models and a graphical user interface (GUI) to find/generate appropriate designs.

The computationally intensive parts of the package, i.e.\ the search algorithm, is written using the R packages Rcpp and RcppArmadillo (\cite{eddelbuettel2011rcpp} and \cite{rcpparmadillo}). The GUI is written in Java and uses package rJava (\cite{rJava}).

\subsection{Installation}

%If you don't already have R on your system, you can download a bundled
%version of R and crossover from \url{http://www.algorithm-forge.com/gMCP/bundle/}.

%Open R and type \texttt{install.packages("crossover")}, 
%select an arbitrary mirror and crossover will be downloaded and installed.

Once it is installed, whenever you start R you can load the crossover
package by entering \texttt{library(crossover)} into the R Console. The
graphical user interface as shown in figure \ref{GUI} is started with the command
\texttt{crossoverGUI()}.

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.7\textwidth]{figures/GUI.png}      
  \caption{\label{GUI} Cross-Over Design GUI.}
\end{figure}

%If you run into problems, see
%\url{http://cran.r-project.org/web/packages/gMCP/INSTALL} or please write us
%an email at
%\href{mailto:help@small-projects.de}{\texttt{help@small-projects.de}}.
%We are eager to help and to learn about existing problems.

\subsection{GUI Overview}
\subsubsection{Catalogue}
The catalogue, collected and compiled by Professor Byron Jones, contains 241 designs from the following literature: \cite{anderson2002locally}, \cite{archdeacon1980some}, \cite{atkinson1966designs}, \cite{balaam1968two}, \cite{berenblut1964change}, \cite{blaisdell1980partially}, \cite{davis1969cyclic}, \cite{federer1964tied}, \cite{fletcher1987new}, \cite{iqbal1994efficient}, \cite{lewis1988factorial}, \cite{cochran1941double}, \cite{patterson1962change}, \cite{pigeon1985residual}, \cite{prescott1999construction}, \cite{quenouille1953design}, \cite{russell1991construction}, \cite{lucas1956switchback}, \cite{williams1949experimental}, \cite{prescott1994}, \cite{bate2002}

Depending on the numbers of treatments, periods and range of sequence you specify in the GUI appropriate designs from the catalogue will be shown.\footnote{You can get a table referencing all designs and the respective number of treatments, periods and sequences by calling \texttt{buildSummaryTable()}.}
Further functions from package crossdes (\cite{crossdes}) are called to create designs for the specified values if possible.

\begin{description}
\item[Designs from package archive] The previously noted designs from literature are shown.
\item[Designs generated by package crossdes] Activating this option will result in short delays when displaying the catalogue, since the crossdes algorithms are called.
\item[Designs manually entered] All designs entered on tab "\emph{Input own design}" are shown.
\item[Designs from previous search runs] All designs from previous search runs are shown.

\end{description}

\subsubsection{Algorithm Search}

In figure \ref{Algorithm} the preliminary graphical interface for the search algorithm is shown with the following options:
\begin{itemize}
  \item The drop-down menu for \emph{model} let you specify which model you are interested. These models are described in detail in section \ref{sec:models}.
  \item In case of the placebo or proportionality model you can specify \emph{further model parameters} (namely the number of placebos and the proportionality parameter, respectively).
  \item 
    Specify the exact \emph{number of sequences}. (The number of treatments and periods is already specified in the top panel of the GUI.)
  \item Optionally specify the \emph{exact number of treatment assignments}. The GUI default is to let the algorithm figure out good/optimal assignments. But depending on further information (information from theoretical results or treatments more important than the others\footnote{Different weights of treatment importance should be specified as weighted contrasts. See item \emph{contrasts}.}, etc.) the number of treatment assignments can be specified.
  \item You can specify that the design should be constructed in a way that \emph{in each sequence/period a treatment occur as evenly as possible}. This restriction will normally decrease the efficiency of the algorithm.
  \item The GUI default is an all-pair comparison of all treatments with equal weights. Change the \emph{contrast weights} accordingly if you are interested in other contrasts or different weights.
  
  \emph{User defined contrasts} can be used and a R matrix of $n$ contrasts (i.e. of dimension $n\times v$) will be used.
  \item Pressing the \emph{"Compute Design"} button will start the search algorithm described in section \ref{sec:search}. After a few seconds the result will be shown in the previous empty text area on the right.
\end{itemize}

\begin{figure}[ht]
  \centering    
  \includegraphics[width=0.7\textwidth]{figures/Algorithm.png}      
  \caption{\label{Algorithm} Panel for algorthmic search of cross-over designs.}
\end{figure}

\subsubsection{Input own design}

This tab provides you with the possibility to analyse your own designs easily or use them as starting points for the search algorithm.

\section{Models}\label{sec:models}

The package and GUI support the following eight models.

\subsection{Standard additive model}\index{model!standard additive}

\[Y_{ijk}=\mu+\pi_j+\tau_{d[i,j]}+\lambda_{d[i,j-1]}+s_{ik}+e_{ijk}\]

with\footnote{cf. \cite{jones2003design}, page 8}

\begin{description}
  \item[$\mu$] intercept,
  \item[$\pi_j$] period effect for period $j$,
  \item[$\tau_{d[i,j]}$] direct treatment effect for treatment $d[i,j]$ in period $j$ of sequence $i$,
  \item[$\lambda_{d[i,j-1]}$] first-order carry-over effect (0 for $j-1$=0),
  \item[$s_{ik}$] $k$th subject effect on sequence $i$, %TODO What is the most elegant way to handle this? We only need/want s_i?
  \item[$e_{ijk}$] random error with zero mean and variance $\sigma^2$.
\end{description}

which we can write as

\[E(Y)=\mu + X \bigl( \begin{smallmatrix}
\tau\\ \lambda
\end{smallmatrix} \bigr)+Z\bigl( \begin{smallmatrix}
\pi\\ s
\end{smallmatrix} \bigr)\]

with $X$ and $Z$ called the \emph{treatment}\index{treatment design matrix} and \emph{block design matrices}\index{block design matrix}, respectively.

We call $H$ a \emph{link matrix}\index{link matrix} if $X=X_rH$ were $X_r$ is the design matrix for the row-column design.
The rows of the link matrix specify all possible parameter combinations.

<<StandardAdditive, echo=TRUE>>=
# Design:
design <- rbind(c(3,2,1),
                c(2,1,3),
                c(1,2,3),
                c(3,2,1))
design
v <- 3 # number of treatments
# Link matrix:
H <- crossover:::linkMatrix(model="Standard additive model", v)
H
# Row-Column-Design: (cf. John et al. 2004, Table II and page 2649f.)
rcDesign <- crossover:::rcd(design, v=v, model=1)
rcDesign
# Design Matrix of Row-Column Design:
Xr <- crossover:::rcdMatrix(rcDesign, v, model=1)
Xr
# Design Matrix of Cross-Over Design:
X <- Xr %*% H
X

@

\subsection{Full set of interactions}\index{model!with full set of interactions}

This model has further interaction parameters $\gamma_{ij}$ and a design matrix $X$ with $2*v+v^2$ columns:\footnote{Personally I think some of the overspecified parameters should be dropped, for example $\gamma_{ii}$ - but I'll take a look at this later.}

\[E(Y)=\mu + X \left( \begin{smallmatrix}
\tau\\ \lambda\\ \gamma
\end{smallmatrix} \right)+Z\bigl( \begin{smallmatrix}
\pi\\ s
\end{smallmatrix} \bigr)\]

<<FullInteractions, echo=TRUE>>=

H <- crossover:::linkMatrix(model="Full set of interactions", v)
H
# Design Matrix of Cross-Over Design:
X <- Xr %*% H
X

@

\subsection{Self-adjacency model}\index{model!self-adjacency model}\index{self-adjacency model}

In the \emph{self-adjacency model} $\lambda_i$ is replaced by $\phi_i$ in case of carry-over into itself. The case $\phi=0$ represents the \emph{no carry-over into self model}.

\[E(Y)=\mu + X \bigl( \begin{smallmatrix}
\tau\\ \lambda\\ \phi
\end{smallmatrix} \bigr)+Z\bigl( \begin{smallmatrix}
\pi\\ s
\end{smallmatrix} \bigr)\]

<<SelfAdjacency, echo=TRUE>>=

H <- crossover:::linkMatrix(model="Self-adjacency model", v)
H
# Design Matrix of Cross-Over Design:
X <- Xr %*% H
X

@

\subsection{Placebo model}\index{model!placebo model}\index{model!placebo model}

In the placebo model there are no carry-over effects for the placebo treatment(s).

\[E(Y)=\mu + X \bigl( \begin{smallmatrix}
\tau\\ \lambda
\end{smallmatrix} \bigr)+Z\bigl( \begin{smallmatrix}
\pi\\ s
\end{smallmatrix} \bigr)\]

(I would drop the $0$ column and provide another row-column design matrix... (and apart from consistency - is this really unproblematic?! TODO))

<<echo=TRUE, eval=TRUE>>=
# Link matrix:
H <- crossover:::linkMatrix(model="Placebo model", v, placebos=1)
H
# Design Matrix of Cross-Over Design:
X <- Xr %*% H
X

@

\subsection{No carry-over into self model}\index{model!no carry-over into self}

This model differs from the standard additive model in the assumption that in the \emph{no carry-over into self model} no carry-over effect occurs if current and previous treatment are the same.

\[E(Y)=\mu + X \bigl( \begin{smallmatrix}
\tau\\ \lambda
\end{smallmatrix} \bigr)+Z\bigl( \begin{smallmatrix}
\pi\\ s
\end{smallmatrix} \bigr)\]

<<NoIntoSelf, echo=TRUE>>=

H <- crossover:::linkMatrix(model="No carry-over into self model", v)
H
# Design Matrix of Cross-Over Design:
X <- Xr %*% H
X

@

\subsection{Treatment decay model}\index{model!treatment decay}

In contrast to the no carry-over into self model in the \emph{treatment decay model} we assume there are only (negative) carry-over effects if the current and previous treatment are the same.

\[E(Y)=\mu + X \bigl( \begin{smallmatrix}
\tau\\ \lambda
\end{smallmatrix} \bigr)+Z\bigl( \begin{smallmatrix}
\pi\\ s
\end{smallmatrix} \bigr)\]

<<TreatmentDecay, echo=TRUE>>=

H <- crossover:::linkMatrix(model="Treatment decay model", v)
H
# Design Matrix of Cross-Over Design:
X <- Xr %*% H
X

@

\subsection{Proportionality model}\index{model!proportionality model}

For the proportionality model we have no separate carry-over effects, but assume for period $i>1$ an additive proportion $p$ of the effect $\tau_{d(i-1,j)}$ from the previous treatment $d(i-1,j)$. This model is non-linear in $p$, therefore we assume $p$ is known.

\[E(Y)=\mu + X_p\tau +Z\bigl( \begin{smallmatrix}
\pi\\ s
\end{smallmatrix} \bigr)\]

<<Proportionality, echo=TRUE>>=

H <- crossover:::linkMatrix(model="Proportionality model", v)
H
# Design Matrix of Cross-Over Design:
X <- Xr %*% H
X

@

\subsection{Second-order carry-over effects}\index{model!with second-order carry-over effects}\index{second-order carry-over effects}

In the model with second-order carry-over effects we do have another vector $\lambda_2$ of carry-over effects:

\[E(Y)=\mu + X \left( \begin{smallmatrix}
\tau\\ \lambda_1\\ \lambda_2
\end{smallmatrix} \right)+Z\bigl( \begin{smallmatrix}
\pi\\ s
\end{smallmatrix} \bigr)\]

Therefore the link matrix has $3*v$ columns. % and we calculate the row-column design

<<SecondOrder, echo=TRUE>>=
# Link matrix:
H <- crossover:::linkMatrix(model="Second-order carry-over effects", v)
H
# Row-Column-Design: (cf. John et al. 2004, Table II and page 2649f.)
rcDesign <- crossover:::rcd(design, v=v, model=8)
rcDesign
# Design Matrix of Row-Column Design:
Xr <- crossover:::rcdMatrix(rcDesign, v, model=8)
Xr
# Design Matrix of Cross-Over Design:
X <- Xr %*% H
X

@


\section{Search strategy}\label{sec:search}
Monte-Carlo search for first candidates, followed by parallel hill climbing search, extended by long jumps. (Blind movement, probabilistic movement?)

In the following graphic we see 100.000 design evaluations (that take less than 7 seconds on my computer), consisting out of 20 hill climbing search \emph{runs} from 20 different designs as starting point which were selected by a Monte-Carlo search. We can see that 10 out of the 20 search runs were not able to achieve the efficieny the other 10 achieved. We can see, that there were most likely at least four local maxima the hill climbing search found and got stuck:

<<SearchStrategy, echo=TRUE, eval=TRUE, cache=TRUE, dev='png', dpi=150>>=

set.seed(42)
x <- searchCrossOverDesign(s=9, p=5, v=4, model=4)
plot(x)
plot(x, type=2)

@

%For a given cross-over design we create a row-column design, calculate the information matrix $A_r$ for this design from
%\[A_r=r^\delta-\tfrac{1}{s}N_pN_p'-\tfrac{1}{p}N_sN_s'+\tfrac{1}{ps}rr'.\]
%For details see \cite{j1995cyclic} and \cite{john2004crossover}.

\subsection{Evaluation of Algorithm Performance}

Let's compare the results from the search algorithm with results from the literature. 

\begin{Example}
First we compare our results with results from the algorithm of \cite{john2004crossover} that are presented in \cite[table~4.35-4.38, p.~215]{jones2003design} for s=6 sequences, p=4 periods and v=2 treatments.

<<modelsFromLiterature1, echo=TRUE, eval=TRUE, cache=TRUE, tidy=FALSE>>=
s <- 6; p <- 4; v <- 2

design1 <- t(rbind(c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,2,2,1),
                   c(2,1,1,2)))
design2 <- t(rbind(c(1,1,2,1),
                   c(2,2,1,2),
                   c(1,1,2,1),
                   c(2,2,1,2),
                   c(1,2,2,1),
                   c(2,1,1,2)))
design3 <- t(rbind(c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1)))
design4 <- t(rbind(c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1))) # Why is there no design 4 in the book?
design5 <- t(rbind(c(1,2,2,2),
                   c(2,1,1,1),
                   c(1,2,2,2),
                   c(2,1,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1)))
design6 <- t(rbind(c(1,2,1,2),
                   c(2,1,2,1),
                   c(1,1,2,1),
                   c(2,2,1,2),
                   c(1,2,1,2),
                   c(2,1,2,1)))
design7 <- t(rbind(c(1,1,2,1),
                   c(2,2,1,2),
                   c(1,1,1,2),
                   c(2,2,2,1),
                   c(1,2,1,1),
                   c(2,1,2,2)))
design8 <- t(rbind(c(1,2,2,2),
                   c(2,1,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,2,1,2),
                   c(2,1,2,1)))

designs <- list(design1, design2, design3, design4, design5, design6, design7, design8)

models <- c("Standard additive model",
            "Self-adjacency model",
            "Proportionality model",
            "Placebo model",
            "No carry-over into self model",
            "Treatment decay model",
            "Full set of interactions",
            "Second-order carry-over effects")

@

<<eval1a, echo=TRUE, eval=TRUE, cache=TRUE, tidy=FALSE>>=

attach(loadNamespace("crossover"), name="namespace:crossover", pos=3, warn.conflicts=FALSE)

for (i in 1:8) {  
    H <- linkMatrix(model=i, v=v)
    n <- dim(H)[2]
    cat(paste("Are the treatment differences estimable under model ",i,"? ", 
              estimable(designs[[i]], v=v, model=i), "/", estimable_R(designs[[i]], v=v, model=i), "\n", sep=""))
    cat(paste("Are the treatment parameters estimable under model ",i,"? ", 
              estimable(designs[[i]], v=v, model=i, C=diag(n)[1:2,]), "/", estimable_R(designs[[i]], v=v, model=i, C=diag(n)[1:2,]), "\n", sep=""))
    cat(paste("Are all parameters estimable under model ",i,"? ", 
              estimable(designs[[i]], v=v, model=i, C=diag(n)), "/", estimable_R(designs[[i]], v=v, model=i, C=diag(n)), "\n", sep=""))
}

rcDesign <- rcd(design1, v, model=1)
Ar <- infMatrix(rcDesign, v, model=1)
Xr <- rcdMatrix(rcDesign, v, model=1)
H <- linkMatrix(1,v)
X <- Xr %*% H
A <- t(H) %*% Ar %*% H
rankMatrix(X)
C <- rbind(diag(v), matrix(0, v, v))
XX <- t(X) %*% X
all.equal(t(C) %*% ginv(XX) %*% XX, t(C)) # Criterion to test whether - see Theorem \ref{thr:estimable}

A
rankMatrix(A)


@

<<eval1b, echo=TRUE, eval=TRUE, cache=TRUE, tidy=FALSE, withNameSpace=TRUE>>=

checkResult <- function (result, refDesign, model) {
    allDesigns <- result@misc$designs
    df <- data.frame(run=numeric(0), step=numeric(0), crit=numeric(0))
    for (i in 1:length(allDesigns)) {
        designs <- allDesigns[[i]]
        for (j in 1:min(10, length(designs))) {
            design <- designs[[j]]
            crit <- sum(general.carryover(design, model=model)$Var.trt.pair)/2
            df <- rbind(df, data.frame(run=i, step=j, crit=crit))
        }
    }
    plot <- ggplot(df, aes(x=step, y=crit)) + geom_point() + facet_wrap( ~ run)
    return(list(df=df, plot=plot))
}

for (i in 1:8) {  
    model <- models[i]
    cat("======= ", model, " =======","\n")
    H <- linkMatrix(model=i, v=v)
    n <- dim(H)[2]
    result <- searchCrossOverDesign(s=s, p=p, v=v, model=model, start.designs=list(designs[[i]]))
    print(result)
    print(general.carryover(designs[[i]], model=i)) 
    print(design.efficiency(designs[[i]]))
    print(design.efficiency(result))    
    cat(paste("Are the treatment differences estimable under model ",i,"? ", 
              estimable(getDesign(result), v=v, model=i), "/", estimable_R(getDesign(result), v=v, model=i), "\n", sep=""))
    cat(paste("Are the treatment parameters estimable under model ",i,"? ", 
              estimable(getDesign(result), v=v, model=i, C=diag(n)[1:2,]), "/", estimable_R(getDesign(result), v=v, model=i, C=diag(n)[1:2,]), "\n", sep=""))
    cat(paste("Are all parameters estimable under model ",i,"? ", 
              estimable(getDesign(result), v=v, model=i, C=diag(n)), "/", estimable_R(getDesign(result), v=v, model=i, C=diag(n)), "\n", sep=""))
    
    print(plot(result) + ggtitle(models[i]))  
    print(checkResult(result, designs[[i]], model=i)$plot+ ggtitle(models[i]))
    
}

searchCrossOverDesign(s=s, p=p, v=v, model=3)
searchCrossOverDesign(s=s, p=p, v=v, model=3, start.designs=list(design3))

#infMatrix(X,v,model)
#infMatrix_R(X,v,model, method=1)
#infMatrix_R(X,v,model, method=2)

@

\end{Example}

<<correct, echo=TRUE, eval=TRUE, cache=TRUE>>=

# For the self-adjacency model our algorithm found for example:
v <- 2
d <- structure(c(1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 2, 
2, 2, 2, 1, 1, 2, 1), .Dim = c(4L, 6L))

d

# Which seems to compare well in regard to Var.trt.pair (and Var.car.pair.1 
# but a little worse in Var.car.pair.2) to the reference design from literature:

general.carryover(d, model=2)
general.carryover(design2, model=2)

rcDesign <- crossover:::rcd(d, v=v, model=2)
rcDesign
X <- crossover:::rcdMatrix(rcDesign, v=v, model=2) %*% crossover:::linkMatrix(model="Self-adjacency model", v)
crossover:::estimable_R(d, v, model=2, diag(6))
crossover:::estimable(d, v, model=2, diag(6))




@

<<attachNameSpace, echo=TRUE, eval=FALSE, results='hide'>>=
 # We will use a lot of internal commands since we will test and evaluate things the normal user will probably not be interested in. Therefore we load and attach the namespace.
# attach(loadNamespace("crossover"), name="namespace:crossover", pos=3)
# When we are finished we call 'detach("namespace:crossover")'.
@

There are different approaches to calculate the Information matrix $A_r$ of the row-column design.
In the following code fragment we compare the two different approaches:

\[A_r=r^\delta-\tfrac{1}{s}N_pN_p'-\tfrac{1}{p}N_sN_s'+\tfrac{1}{ps}rr' \text{ and }\]
\[A_r=X_r'(I-P_z)X_r.\]
For details (what are $N_p$, $N_s$, $P_z$, etc.) see \cite{j1995cyclic} and \cite{john2004crossover}.

<<TestOfDifferentApproaches, echo=TRUE, eval=TRUE, withNameSpace=TRUE>>=

s <- 6
p <- 3
v <- 3
model <- 1
data(williams)
design <- williams3t
  
rcDesign <- rcd(design, v, model)
# JRW, p 2650, first equation on that page, whithout number
Ar <- infMatrix(rcDesign, v, model)
Xr <- rcdMatrix(rcDesign, v, model)
# JRW, p 2650, second equation on that page, number 11
Ar2 <- t(Xr) %*% (diag(s*p)-crossover:::getPZ(s,p)) %*% Xr
max(abs(Ar-Ar2))

fXr <- cbind(Xr, getZ(s,p))
Ar3 <- t(fXr) %*% fXr
ginv(Ar3)[1:12,1:12]-ginv(Ar2)

H <- linkMatrix(model=model,v=v)
fX <- cbind(Xr%*%H, getZ(s,p))
A1 <- t(fX) %*% fX
A2 <- t(H)%*%Ar%*%H

# While A1 and A2 differ:

ginv(A1)[1:6,1:6]
ginv(A2)
max(abs(ginv(A1)[1:6,1:6]-ginv(A2)))

# The variances for the estimable contrasts are the same:

C <- matrix(0,nrow=15,ncol=1)
C[1:2,1] <- c(-1,1)
tdiff1 <- t(C)%*%ginv(A1)%*%C
tdiff2 <- t(C[1:6,])%*%ginv(A2)%*%C[1:6,]
tdiff1 - tdiff2

C <- matrix(0,nrow=6,ncol=1)
C[1:2,1] <- c(-1,1)
tdiff1 <- t(C)%*%ginv(A1)[1:6,1:6]%*%C
tdiff2 <- t(C)%*%ginv(A2)%*%C
tdiff1 - tdiff2

@
  
In the following code chunk we will compare the results from our approach in the search function with the results from the function \texttt{general.carryover}.

\begin{Def}[Efficiency]
  If the difference of two treatments, each replicated r times, is estimated in an \emph{ideal design} with residual variance $\sigma^2$, the variance of the estimated difference $\overline{y}\!_A-\overline{y}\!_B$ is
  \[V_I=\frac{2\sigma^2}{r}.\]
  In a cross-over design the variance of a parameter estimates for $A$ and $B$ are given by the corresponding elements $\sigma^2x_A$ and $\sigma^2x_A$ of
  \[\sigma^2(X^TX)^{-1}\]
  with $X$ the crossover design matrix. The variance of the difference is $\sigma^2 (x_A + x_B - 2*x_{AB})$ where $x_{AB}$ is the element of $X^TX$ specifying the covariance of the two treatment parameter estimates.
  The efficiency is \[E:=\frac{V_I}{V_C}=\frac{2}{rx}\;\in[0,1].\]
\end{Def}

<<checkS2, withNameSpace=TRUE>>=

s <- 6
p <- 3
v <- 3
model <- 1
H <- linkMatrix(model=model, v=v)
r <- c(rep(s/v, v), rep((p-1)*s/v^2, v^2))

Csub <- contrMat(n=rep(1, v), type="Tukey")
class(Csub) <- "matrix" #TODO Package matrix can be improved here (IMO)!
C <- appendZeroColumns(Csub, model, v)
CC <- t(C) %*% C

S2 <- sum(diag(ginv(t(H) %*% diag(r) %*% H) %*% CC))

@
  
<<TestWithGeneral.carryover, echo=FALSE, eval=FALSE, withNameSpace=TRUE>>=
  compareApproaches
  compareApproaches(design)
  data(atkinson)
  design <- atkinson3t
  compareApproaches(design)
  p <- 8
  s <- 10
  v.rep <- rep((s*p) %/% v, v) + c(rep(1, (s*p) %% v), rep(0, v-((s*p) %% v)))
  design <- matrix(unlist(tapply(rep(1:v, v.rep), as.factor(rep(1:s,p)), sample)), p, s)
  compareApproaches(design)
@


\section{Random Subject Effects Model}

See \cite{jones2003design}, 5.3, page 213ff. The model stays the same

\[Y_{ijk}=\mu+\pi_j+\tau_{d[i,j]}+\lambda_{d[i,j-1]}+s_{ik}+e_{ijk},\]

but we also assume that the subject effects follow a normal distribution: $s_{ik}\sim\sN(0,\sigma_s^2)$.

In matrix notation we have
\[Y=X\beta+Z\gamma+\epsilon\]
with $X$ and $Z$ the fixed and random effects design matrices\footnote{Note that $X$ and $Z$ are different from the ...}, $\epsilon\sim\sN(0,\Sigma)$ and $\gamma\sim\sN(0,D)$. Then\footnote{See for example \cite[chapter 5]{lee2006generalized}.} \[\Var(Y)=ZDZ^T+\Sigma.\]

For known $V:=\Var(Y)=ZDZ^T+\Sigma$ the MLE and BLUE is given by

\[\hat\beta=(X^tV^{-1}X)^{-1}X^tV^{-1}Y.\]

The information matrix is $\ldots$

<<informationMatrixRandomEffects, echo=TRUE, withNameSpace=TRUE>>=
s <- 4
p <- 5
v <- 2
model <- 1
v.rep <- rep((s*p) %/% v, v) + c(rep(1, (s*p) %% v), rep(0, v-((s*p) %% v)))
design <- matrix(sample(rep(1:v, v.rep)), p, s)
estimable(design, v=v, model=model)

rho <- 0.5
theta <- (1-(p-2)*rho)/((1-rho)*(1+(p-1)*rho))
psi <- -rho/(1+(p-2)*rho)
Ip <- diag(p)
Jp <- matrix(1, nrow=p, ncol=p)
Lambda <- (1-rho)*Ip+rho*Jp
LambdaI <- theta*((1-psi)*Ip+psi*Jp)
solve(Lambda) - LambdaI

LambdaSI <- bdiag(replicate(s, solve(Lambda), simplify=FALSE))

X <- getDesignMatrix(design, v)
solve(t(X)%*%LambdaSI%*%X)

f <- function (rho) {
    theta <- (1-(p-2)*rho)/((1-rho)*(1+(p-1)*rho))
    psi <- -rho/(1+(p-2)*rho)
    Ip <- diag(p)
    Jp <- matrix(1, nrow=p, ncol=p)
    Lambda <- (1-rho)*Ip+rho*Jp
    LambdaI <- theta*((1-psi)*Ip+psi*Jp)
    return(max(abs(solve(Lambda)-LambdaI)))
} 
plot(Vectorize(f), xlim=c(0.01,0.99))

@

<<detachNameSpace, echo=TRUE, eval=FALSE, results='hide'>>=
detach("namespace:crossover")
@


\begin{appendix} 

\section{Appendix - Row-Column Designs}

This section is work in progress.

\section{Appendix - Matrix Algebra}

\subsection{Fisher information}\index{Fisher information}\index{information matrix}



For a linear regression model with design matrix $X$ and variance $\sigma^2$ the information matrix is given by
\[\frac{1}{\sigma^2}X^TX.\]
(Any constraints or citations?)

\subsection{Generalized inverse}

\begin{Def}[Moore-Penrose pseudoinverse]\index{Moore-Penrose pseudoinverse}
 For $A\in\R^{m\times n}$ a matrix $A^+$ is called Moore-Penrose pseudoinverse iff
 \begin{enumerate}
 \item $AA^+A=A$,
 \item $A^+AA^+=A^+$,
 \item $(AA^+)^T=AA^+$ and
 \item $(A^+A)^T=A^+A$.
 \end{enumerate}
 The Moore-Penrose pseudoinverse exists for every real matrix and is unique.
\end{Def}

\begin{Theorem}
  Let $Ax=b$ a linear equation system in $n$ variables and $A^+$ the Moore-Penrose pseudoinverse
  of $A$. Solutions exist if and only if $AA^+b=b$ and are given in this case by
  \[\{A^+b+(I-A^+A)y\;|\; y\in\R^n\}.\]
  \begin{Proof}
  If  $AA^+b=b$ we have for every $A^+b+(I-A^+A)y$ with $y\in\R^n$:
  \[A(A^+b+(I-A^+A)y)=b+Ay-AA^+Ay=b+Ay-Ay=b\]
  ...
  \end{Proof}
\end{Theorem}

\begin{Theorem}\label{thr:estimable}
  Let $y=X\beta+\epsilon$ be a linear model with $\epsilon\sim\sN(0,\sigma^2I)$. 
  Then $t^T\beta$ is estimable iff $t^T(X^TX)^+X^TX=t^T$.  
  %\begin{Proof}
  %"$\Rightarrow$": %If $t^T\beta$ is estimable if a $z$ exists with $X^TXz=t$.
  %\[X^TX(X^TX)^+t=t\]
  %\end{Proof}
\end{Theorem}

\subsection{Linear Mixed Models}\index{Linear Mixed Models}
In the \emph{linear mixed model} the response Y is given by
\[Y=X\beta+Z\gamma+\epsilon\]
with $X$ and $Z$ the fixed and random effects design matrices, $\epsilon\sim\sN(0,\Sigma)$ and $\gamma\sim\sN(0,D)$. Then\footnote{See for example \cite[chapter 5]{lee2006generalized}.} \[\Var(Y)=ZDZ^T+\Sigma.\]

For known $V:=\Var(Y)=ZDZ^T+\Sigma$ the MLE and BLUE is given by

\[\hat\beta=(X^tV^{-1}X)^{-1}X^tV^{-1}Y.\]

<<mixed1, echo=TRUE>>=

tc <- textConnection("subject period treatment outcome
1 1 C 5.15
1 2 B 5.97
2 1 B 3.19
2 2 C 4.74
3 1 A 6.59
3 2 B 6.28
4 1 C 2.26
4 2 A 4.12
5 1 B 5.87
5 2 A 2.99
6 1 A 4.94
6 2 C 3.71
7 1 C 3.81
7 2 A 1.54
8 1 A 6.18
8 2 C 5.56
9 1 A 2.37
9 2 B 5.76
10 1 C 5.15
10 2 B 5.87
11 1 B 3.09
11 2 A 1.44
12 1 B 3.91
12 2 C 4.32
13 1 A 4.32
13 2 B 6.07
14 1 B 4.94
14 2 A 0.62
15 1 C 2.68
15 2 A 5.76
16 1 B 3.60
16 2 C 1.85
17 1 C 4.43
17 2 B 5.15
18 1 A 0.82
18 2 C 0.62")            

example5.2 <- read.table(tc, header = TRUE, as.is=TRUE)
close(tc)
example5.2$treatment <- factor(example5.2$treatment, levels=c("C", "A", "B"))

fit <- lm(outcome~subject+period+treatment, data=example5.2)
summary(glht(fit, linfct=mcp(treatment="Dunnett")))

library(nlme)

fit <- lme(outcome~period+treatment, random=~1| subject, data=example5.2)
summary(fit)
# Compare standard error with book (REML, p.219): check.
summary(glht(fit, linfct=mcp(treatment="Dunnett")))

@

\section{Appendix - Internals}

\subsection{Naming conventions}
Most functions exist as R and C/C++ variant, with the following naming conventions:

We have functions in R and on the C/C++ level with the same name (in our folowing example \texttt{rcd}) that should be used in R and C/C++ respectively. The R function \texttt{rcd} calls the C function \texttt{rcd2R} which handles the conversion from and to the R structures the SEXP are pointing to. Apart from that we often provide an R function with a suffix \texttt{\_R}, i.e.\ in our example \texttt{rcd\_R}, which is a pure R function and reimplements the same functionality for testing purposes.

\lstset{language=C++}
\begin{lstlisting}
SEXP createRCDesign2R(SEXP designS, SEXP vS, SEXP modelS) {...}
arma::mat createRCDesign(arma::mat design, int v, int model) {...}
\end{lstlisting}

\lstset{language=R}
\begin{lstlisting}
createRCDesign <- function(X, v, model) {
  return(.Call("createRCDesign2R", X, v, model, PACKAGE = "crossover"))
}
createRCDesign_R <- function(X, v, model) {
  # Same functionality written in R
}
\end{lstlisting}

A variable $v$ means \emph{always} the original number of treatments. A variable $vv$ stands for the maximum number of different settings\footnote{For the no carry-over into self or placebo model there are actually less settings.}, either $v+v^2$ or for the second-order carry-over effects $v+v^2+v^3$.

\section{Updating the information matrix}

<<update1, echo=TRUE>>=

data(williams)
designA <- williams3t; v <- 3; s <- 6; p <- 3; model <- 1
rcDesignA <- crossover:::rcd(designA, v, model=model)
XrA <- crossover:::rcdMatrix(rcDesignA, v, model)
ArA <- t(XrA) %*% (diag(s*p)-crossover:::getPZ(s,p)) %*% XrA
ArA2 <- crossover:::infMatrix(rcDesignA, v, model=model)
all.equal(ArA, ArA2)

p1 <- 1; s1 <- 1
p2 <- 1; s2 <- 2
XrB <- XrA
XrB[1,] <- XrA[2,]
XrB[2,] <- XrA[1,]
ArB <- t(XrB) %*% (diag(s*p)-crossover:::getPZ(s,p)) %*% XrB

n1 <- matrix(0, v+v*v, s) # sequences
n2 <- matrix(0, v+v*v, p) # periods

for (i in 1:(v+v*v)) {
    for (j in 1:s) {
        n1[i,j] <- sum(rcDesignA[,j]==i) # (Or designA?)
    }
    for (j in 1:p) {
        n2[i,j] <- sum(rcDesignA[j,]==i) # (Or designA?)
    }
}

u1 <- (n1[,s2]-n1[,s1])/p
u2 <- (n2[,p2]-n2[,p1])/s

#r <- Vectorize(function(x) { sum(x==designA) })(1:(v+v*v))

t <- rep(0,v+v*v)
t[1] <- u1[1]+1/p+u2[1]+1/s
t[2] <- u1[2]-1/p+u2[2]-1/s
for (i in 3:(v+v*v)) {
    t[i] <- u1[i]+u2[i]
}

c <- 0#(p-1)*(s-1)/(p*s)
a1 <- t[1]-t[2]
a2 <- c+t[1]+t[2]

g <- sqrt(a1^2+a2^2+2*t[3:(v+v*v)]%*%t[3:(v+v*v)])
l1 <- a1+g
l2 <- a1-g
c(l1, l2)

ev <- eigen(ArB-ArA)$values
ev[abs(ev)>0.001]

@

\end{appendix}

\nocite{*}

\newpage

\addcontentsline{toc}{section}{Index}
\printindex

%\newpage
%\listofalgorithms
%\listoffigures
%\listoftables

\newpage

\addcontentsline{toc}{section}{Literatur}
\bibliography{literatur}

\addcontentsline{toc}{section}{Table of Symbols}
\section*{Table of Symbols}\footnotesize
%\twocolumn[\section{Symbolverzeichnis}]
\begin{tabularx}{\textwidth}{lX}
\multicolumn{2}{l}{\textbf{Sets}}\\
\R& set of real numbers\\
\NN& set of natural numbers (including 0)\\
$\Pot(X)$ & power set of set $X$, i.e.\ the set of all subsets of $X$\\
\\
\multicolumn{2}{l}{\textbf{Variables}}\\
$v$& number of treatments\\
$p$& number of periods\\
$s$& number of sequences\\
$\mu$& intercept\\
$\pi_j$& period effect for period $j$\\
$\tau_{d[i,j]}$& direct treatment effect for treatment $d[i,j]$ in period $j$ of sequence $i$\\
$\lambda_{d[i,j-1]}$& first-order carry-over effect (0 for $j-1$=0)\\
$s_{ik}$& $k$th subject effect on sequence $i$\\
$e_{ijk}$& random error with zero mean and variance $\sigma^2$\\
%\end{tabularx}\\
%\begin{tabularx}{\textwidth}{lX}
\multicolumn{2}{l}{\textbf{Functions}}\\
$X'$ & transpose of matrix $X$\\
$X^+$ & Moore-Penrose pseudoinverse of $X$\\
$\skp{\cdot,\cdot}$ & standard direct product $\skp{x,y}=\sum_{j=1}^nx_j\cdot y_j$ for $x,y\in\R^n$\\
$\id_X$ & identity on $X$, i.e.\ $\id_X:\;X\rightarrow X,\;x\mapsto x$\\
\multicolumn{2}{l}{\textbf{Other Symbols}}\\
$\sN(\mu,\sigma^2)$ & Normal distribution with mean $\mu$ and variance $\sigma^2$.\\
$\sN(\mu,\Sigma)$ & Multivariate normal distribution with mean $\mu$ and covariance matrix $\Sigma$.\\
\end{tabularx}
%\onecolumn

\normalsize

\newpage

\end{document}
