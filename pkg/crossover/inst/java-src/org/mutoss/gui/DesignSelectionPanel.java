package org.mutoss.gui;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.List;

import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.jdesktop.swingworker.SwingWorker;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

public class DesignSelectionPanel extends JPanel implements ListSelectionListener, ActionListener, MouseListener {
	
	DesignTable designTable;
	//JList designList;
	//DefaultListModel lmDesign;
	//JTextArea jta;
	HTMLOutputPane jta;
	List<Design> designs;
	JCheckBox jcbPackageArchive = new JCheckBox("Designs from package archive");
	JCheckBox jcbCrossdes = new JCheckBox("Designs generated by package crossdes");
	JCheckBox jcbMyDesigns = new JCheckBox("Designs manually entered");
	JCheckBox jcbSearch = new JCheckBox("Designs from previous search runs");
	CrossoverGUI gui;
	
	
	
	public DesignSelectionPanel(CrossoverGUI gui) {
		this.gui = gui;
		
		String cols = "5dlu, fill:min:grow, 5dlu, fill:min:grow, 5dlu,";
        String rows = "5dlu, pref, 5dlu, fill:min:grow, 5dlu, pref, 2dlu, pref, 2dlu, pref, 2dlu, pref, 5dlu";
        
        FormLayout layout = new FormLayout(cols, rows);
        layout.setColumnGroups(new int[][]{ {2, 4} });

        setLayout(layout);
        CellConstraints cc = new CellConstraints();
		
		int row = 2;
    	
    	add(new JLabel("List of designs:"), cc.xy(2, row));
        add(new JLabel("Selected design:"), cc.xy(4, row));
		
        row+=2;
        
        designTable = new DesignTable();	
        designTable.addMouseListener(this);
		designTable.getSelectionModel().addListSelectionListener(this);
		
		jta = new HTMLOutputPane(gui);
		jta.setFont(new Font("Monospaced", Font.PLAIN, 12));
		/*jta.setLineWrap(false);		
		jta.setMargin(new Insets(4,4,4,4));*/
		
    	add(new JScrollPane(designTable), cc.xy(2, row));
        add(new JScrollPane(jta), cc.xywh(4, row, 1, 9));
		
        row+=2;
        
        add(jcbPackageArchive, cc.xy(2, row));
        jcbPackageArchive.setSelected(true);
        jcbPackageArchive.addActionListener(this);
        
        row+=2;
        
        add(jcbCrossdes, cc.xy(2, row));
        jcbCrossdes.setSelected(true);
        jcbCrossdes.addActionListener(this);
        
        row+=2;
        
        add(jcbMyDesigns, cc.xy(2, row));
        jcbMyDesigns.setSelected(true);
        jcbMyDesigns.addActionListener(this);
        
        row+=2;
        
        add(jcbSearch, cc.xy(2, row));
        jcbSearch.setSelected(true);
        jcbSearch.addActionListener(this);
        
	}
	
	public DesignSelectionPanel(List<Design> designs, CrossoverGUI gui) {
		this(gui);
		setDesigns(designs);
	}

	public void setDesigns(List<Design> designs) {
		designTable.setDesigns(designs);
	}

	public void valueChanged(ListSelectionEvent e) {
		int i = designTable.getSelectedRow();
		if (i == -1) return;
		Design design = designTable.getModel().getDesigns().get(i);
		jta.showDesign(design);		
	}

	public void actionPerformed(ActionEvent e) {
		SwingWorker<Void, Void> worker = new FillTableWorker(gui);
		worker.execute();		
	}

	public void mouseClicked(MouseEvent e) {}

	public void mousePressed(MouseEvent e)  {popup(e);}
	public void mouseReleased(MouseEvent e) {popup(e);}

	public void popup(MouseEvent e) {
	    if (e.isPopupTrigger()) {
	    	int r = designTable.rowAtPoint(e.getPoint());
	        JPopupMenu popup = makePopupMenu(r);
            popup.show(e.getComponent(), e.getX(), e.getY());
	    }
	}

	private JPopupMenu makePopupMenu(int r) {
		//TODO should be an own class.
		JPopupMenu jpm = new JPopupMenu();
		jpm.add(new JMenuItem("Delete"));        
		return jpm;
	}

	public void mouseEntered(MouseEvent e) {}

	public void mouseExited(MouseEvent e) {}
	
}
