\documentclass[a4paper, 10pt]{article}
\usepackage{natbib}
\bibliographystyle{plainnat}
\usepackage[T1]{fontenc}
\usepackage{url}
 \usepackage[utf8]{inputenc}
\usepackage{graphicx}
%\usepackage{tikz}
%\usetikzlibrary{decorations,arrows,shapes}
\usepackage[margin=0.9in]{geometry}
%\usepackage[left=3cm,right=3cm,top=2cm,bottom=2cm]{geometry}
\usepackage{hyperref}
\usepackage{listings}
\usepackage{xspace}
\usepackage{tabularx}
\usepackage{makeidx}\makeindex
\usepackage{algorithmic} 
\usepackage{algorithm}
\usepackage{amsmath,amsthm,amsfonts,amssymb}
\setlength{\parindent}{0mm}
\setlength{\parskip}{1mm}
\newcommand{\commentout}[1]{}
\renewcommand{\theequation}{\thesection.\arabic{\equation}}
\numberwithin{equation}{section}

\theoremstyle{definition}
\newtheorem{Def}{Definition}[section]
\newtheorem{Rem}[Def]{Remark}
\newtheorem{RemDef}[Def]{Remark und Definition}
\newtheorem{DefRem}[Def]{Definition und Remark}
\newtheorem{Example}[Def]{Example}
\theoremstyle{plain}
\newtheorem{Theorem}[Def]{Theorem}
\newtheorem{DefTheorem}[Def]{Definition and Theorem}
\newtheorem{Corollary}[Def]{Corollary}
\newtheorem{Lemma}[Def]{Lemma}

\newcommand{\C}{\ensuremath{\mathbb{C}}\xspace}
\newcommand{\R}{\ensuremath{\mathbb{R}}\xspace}
\newcommand{\Q}{\ensuremath{\mathbb{Q}}\xspace}
\newcommand{\Z}{\ensuremath{\mathbb{Z}}\xspace}
\newcommand{\NN}{\ensuremath{\mathbb{N}_0}\xspace}
\newcommand{\N}{\ensuremath{\mathbb{N}}\xspace}
\newcommand{\sF}{\ensuremath{\mathcal{F}}\xspace}
\newcommand{\sN}{\ensuremath{\mathcal{N}}\xspace}
\newcommand{\Pot}{\ensuremath{\mathfrak{Pot}}\xspace}
\newcommand{\kronecker}{\raisebox{1pt}{\ensuremath{\:\otimes\:}}}

\DeclareMathOperator{\range}{range}

\newcommand{\skp}[1]{\left\langle#1\right\rangle}

\renewcommand{\epsilon}{\varepsilon}
\renewcommand{\phi}{\varphi}
\newcommand{\id}{\text{id}}

\newenvironment{Proof}{\par\noindent\upshape\textit{Proof. }\nopagebreak}{\qed\par}

\usepackage{setspace}
\onehalfspacing

\begin{document}

%\VignetteEngine{knitr}
%\VignetteIndexEntry{Crossover - Comparing results}

<<include=FALSE, message=FALSE>>=
if (exists("opts_chunk")) {
  opts_chunk$set(concordance=TRUE)
  opts_chunk$set(tidy.opts=list(keep.blank.line=FALSE, width.cutoff=95))
  #opts_chunk$set(size="footnotesize")
  #opts_chunk$set(size="tiny")
  opts_chunk$set(cache=TRUE)
  opts_chunk$set(autodep=TRUE)
  opts_chunk$set(size="scriptsize") 
}
library(Crossover, quietly=TRUE)
options(width=128)
options(digits=4)
startGUI <- function(...) {invisible(NULL)}
#options(prompt="> ", continue="+ ")
library(MASS)
library(xtable)
library(multcomp)
library(ggplot2)
library(Matrix)
@

\subsection*{Evaluation of Algorithm Performance}

We compare our results with results from the algorithm of \cite{john2004crossover} that are presented in \cite[table~4.35-4.38, p.~202ff]{jones2003design} for s=6 sequences, p=4 periods and v=2 treatments.

<<echo=FALSE, eval=TRUE, cache=TRUE>>=
s <- 6; p <- 4; v <- 2

design1 <- t(rbind(c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,2,2,1),
                   c(2,1,1,2)))
design2 <- t(rbind(c(1,1,2,1),
                   c(2,2,1,2),
                   c(1,1,2,1),
                   c(2,2,1,2),
                   c(1,2,2,1),
                   c(2,1,1,2)))
design3 <- t(rbind(c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1)))
design4 <- t(rbind(c(1,1,2,2), # TODO Also correct in other version
                   c(2,2,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,2,2,1),
                   c(2,1,1,2))) # Why is there no design 4 in the book?
design5 <- t(rbind(c(1,2,2,2),
                   c(2,1,1,1),
                   c(1,2,2,2),
                   c(2,1,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1)))
design6 <- t(rbind(c(1,2,1,2),
                   c(2,1,2,1),
                   c(1,1,2,1),
                   c(2,2,1,2),
                   c(1,2,1,2),
                   c(2,1,2,1)))
design7 <- t(rbind(c(1,1,2,1),
                   c(2,2,1,2),
                   c(1,1,1,2),
                   c(2,2,2,1),
                   c(1,2,1,1),
                   c(2,1,2,2)))
design8 <- t(rbind(c(1,2,2,2),
                   c(2,1,1,1),
                   c(1,1,2,2),
                   c(2,2,1,1),
                   c(1,2,1,2),
                   c(2,1,2,1)))

designs <- list(design1, design2, design3, design4, design5, design6, design7, design8)

models <- c("Standard additive model",
            "Self-adjacency model",
            "Proportionality model",
            "Placebo model",
            "No carry-over into self model",
            "Treatment decay model",
            "Full set of interactions",
            "Second-order carry-over effects")

sortDesign <- function(X) {
  X[, do.call(order, lapply(1:NROW(X), function(i) X[i, ]))]
}

TRYS <- 5

resultL <- list()
for (i in 1:8) {  
    model <- models[i]
    cat("======= ", model, " =======","\n")
    resultSubL <- list()    
    for (k in 1:TRYS) {
        result <- sortDesign(getDesign(searchCrossOverDesign(s=s, p=p, v=v, model=model, v.rep=c(12,12)))) #, start.designs=list(designs[[i]]))
        already.found <- FALSE
        for (design in resultSubL) {
          if (all(result==design)) already.found <- TRUE
        }
        if (!already.found) {
          resultSubL <- c(resultSubL, list(result))
          print(getDesign(result))
          cat("\nTreatment: ", general.carryover(designs[[i]], model=i)$Var.trt.pair[1,2]/4, "(literature) vs. ", general.carryover(result, model=i)$Var.trt.pair[1,2]/4,"\n")
          gco <- general.carryover(designs[[i]], model=i)
          if (!is.null(dim(gco[[2]]))) {
            cat("(1st) Carryover: ", gco[[2]][1,2]/4, "(literature) vs. ", general.carryover(result, model=i)[[2]][1,2]/4,"\n\n")
          }
          cat(paste("designB",i,sep=""), "<-", Crossover:::dputMatrix(getDesign(result)))        
        }
    }
    resultL <- c(resultL, resultSubL)
}    

@

Note that for the full interaction model and the self-adjacency model we get the same results, because they are essentially the same models with \begin{equation*}
\begin{split}
\lambda^{SA}_1&=\lambda^{FI}_1+\gamma^{FI}_{12},\\
\lambda^{SA}_2&=\lambda^{FI}_2+\gamma^{FI}_{21},\\
\phi^{SA}_1&=\lambda^{FI}_1+\gamma^{FI}_{11},\text{ and}\\
\phi^{SA}_2&=\lambda^{FI}_2+\gamma^{FI}_{22}.
\end{split}
\end{equation*}

For the treatment decay model the algorithm provided us with a design where the treatment decay effect never occurs. Let's give a little bit of weight to this treatment decay effect:

<<echo=FALSE, results='hide'>>=

i <- 6

Csub <- contrMat(n=rep(1, v), type="Tukey")
class(Csub) <- "matrix"

C <- as.matrix(bdiag(Csub, Csub))
result <- searchCrossOverDesign(s=s, p=p, v=v, model=i, contrast=C)
cat("**** Equal weight ****\n")
print(getDesign(result))
cat("\nTreatment: ", general.carryover(designs[[i]], model=i)$Var.trt.pair[1,2]/4, "(literature) vs. ", general.carryover(result)$Var.trt.pair[1,2]/4,"\n")
gco <- general.carryover(designs[[i]], model=i)
cat("(1st) Carryover: ", gco[[2]][1,2]/4, "(literature) vs. ", general.carryover(result, model=i)[[2]][1,2]/4,"\n\n")

C <- as.matrix(bdiag(Csub, 0.1*Csub))
result <- searchCrossOverDesign(s=s, p=p, v=v, model=i, contrast=C)
cat("**** Weight 10:1 ****\n")
print(getDesign(result))
cat("\nTreatment: ", general.carryover(designs[[i]], model=i)$Var.trt.pair[1,2]/4, "(literature) vs. ", general.carryover(result)$Var.trt.pair[1,2]/4,"\n")
gco <- general.carryover(designs[[i]], model=i)
cat("(1st) Carryover: ", gco[[2]][1,2]/4, "(literature) vs. ", general.carryover(result, model=i)[[2]][1,2]/4,"\n\n")

C <- as.matrix(bdiag(Csub, 0.01*Csub))
result <- searchCrossOverDesign(s=s, p=p, v=v, model=i, contrast=C)
cat("**** Weight 100:1 ****\n")
print(getDesign(result))
cat("\nTreatment: ", general.carryover(designs[[i]], model=i)$Var.trt.pair[1,2]/4, "(literature) vs. ", general.carryover(result)$Var.trt.pair[1,2]/4,"\n")
gco <- general.carryover(designs[[i]], model=i)
cat("(1st) Carryover: ", gco[[2]][1,2]/4, "(literature) vs. ", general.carryover(result, model=i)[[2]][1,2]/4,"\n\n")

@

<<echo=FALSE>>=

i <- 6
model <- models[i]
cat("======= ", model, " =======","\n")
for (k in 1:TRYS) {
  result <- sortDesign(getDesign(searchCrossOverDesign(s=s, p=p, v=v, model=model, v.rep=c(12,12), eff.factor=c(1,0.01)))) #, start.designs=list(designs[[i]]))
  already.found <- FALSE
  for (design in resultSubL) {
    if (all(result==design)) already.found <- TRUE
  }
  if (!already.found) {
    resultSubL <- c(resultSubL, list(result))
    print(getDesign(result))
    cat("\nTreatment: ", general.carryover(designs[[i]], model=i)$Var.trt.pair[1,2]/4, "(literature) vs. ", general.carryover(result, model=i)$Var.trt.pair[1,2]/4,"\n")
    gco <- general.carryover(designs[[i]], model=i)
    if (!is.null(dim(gco[[2]]))) {
      cat("(1st) Carryover: ", gco[[2]][1,2]/4, "(literature) vs. ", general.carryover(result, model=i)[[2]][1,2]/4,"\n\n")
    }
    cat(paste("designB",i,sep=""), "<-", Crossover:::dputMatrix(getDesign(result)))        
  }
}
resultL <- c(resultL, resultSubL)

@

<<echo=FALSE, include=FALSE>>=
# Or alternatively manually:
Csub <- contrMat(n=rep(1, v), type="Tukey")
class(Csub) <- "matrix"
C <- as.matrix(bdiag(Csub, 0.01*Csub))
C
result <- searchCrossOverDesign(s=s, p=p, v=v, model=model, contrast=C)
result
@

As we can see we find the design from the book, when we give weights 100:1 for treatment / carry-over effects in the treatment decay model.
(As seen in the first result section a zero weight for the carry-over effects results in a model with alternating treatments, so that there never occurs a treatment decay effect.)

\subsubsection*{Summary}

<<echo=FALSE, results='asis'>>=
options(xtable.include.rownames=FALSE, xtable.include.colnames=FALSE, xtable.floating=FALSE)

df <- c()

for (i in 1:length(resultL)) {
  design <- resultL[[i]]
  cat("Design ",i,":\n")
  print(xtable(design, digits=0)) 
  var <- c()
  for (i in models) {
       var <- c(var, general.carryover(design, model=i)$Var.trt.pair[1,2]/4)
  }
  df <- rbind(df, var)
}
rownames(df) <- NULL
df <- as.data.frame(df)
colnames(df) <- c("Additive", "Self-adjacency", "Proportional", "Placebo", "No into self", "Decay", "Interaction", "2nd-order carry-over")
df <- cbind(data.frame(Model=1:length(resultL)), df)

options(xtable.include.colnames=TRUE)
cat("\\scriptsize")
print(xtable(df, digits=4))
@

\normalsize
\bibliography{literatur}

\end{document}
